{"version":3,"sources":["utils/ThreeModuleBonus.js","pages/BonusMapPage/BonusMapPage.js","utils/ThreeModule.js","pages/MapPage/MapPage.js","pages/InstructionsPage/InstructionsPage.js","pages/HomePage/HomePage.js","pages/KeyCommandsPage/KeyCommandsPage.js","constants/routeNames.js","selectors/coordinatesSelector.js","services/coordinatesService.js","selectors/navigationSelector.js","header/Header.js","actions/coordinatesActions.js","constants/actionTypes.js","actions/navigationActions.js","App.js","reducers/coordinatesReducer/coordinatesReducer.js","reducers/navigationReducer/navigationReducer.js","store.js","index.js","assets/team1.png","assets/team2.png","assets/hm-wireframe.gif"],"names":["ThreeModule","props","this","speed","frametime","previousFrameTime","scene","THREE","ambientLight","add","camera","window","innerWidth","innerHeight","position","set","rotateX","Math","PI","up","renderer","setClearColor","setSize","setPixelRatio","devicePixelRatio","ref","appendChild","domElement","resizeHandler","bind","addEventListener","keyboardHandler","geometry","material","displacementMap","load","textureMap","displacementScale","texture","imageMap","map","ground","groundPosX","groundPosY","groundPosZ","animate","currentFrametime","requestAnimationFrame","cameraDirection","getWorldDirection","addScaledVector","render","aspect","updateProjectionMatrix","keyboardEvent","key","rotateZ","rotateY","MapPage","mapRef","React","createRef","current","Component","defaultCoordinate","tilesets","id","minX","maxX","minY","maxY","scale","text","TILE_RESOLUTION","TILE_SIZE","rangeMapper","tileset","x","y","ts","originCoordinate","skyColor","createHorizon","originTile","generateTiles","targetCoordinate","tile","coordinateToScene","createSign","lookAt","color","horizon","near","far","fog","createTile","origin","centerX","centerY","undefined","coordinate","signPosition","textureCanvas","document","createElement","ctx","getContext","width","height","clearRect","fillStyle","fillRect","textAlign","textBaseline","font","fillText","billboardPixelWidth","measureText","lineWidth","strokeStyle","strokeRect","bbPixelHeight","needsUpdate","billboardGeometry","textureWidth","textureHeight","billboardMaterial","transparent","alphaMap","billboard","z","poleGeometry","poleMaterial","pole","bbElevation","gpsParam","URLSearchParams","location","search","get","split","str","parseFloat","north","east","proj4","forward","float","round","InstructionsPage","className","href","HomePage","alt","src","hmGif","team1Image","to","team2Image","KeyCommands","HOME","DIY","KEYS","MAPS","BONUS_MAP","coordinatesSelector","state","coordinatesState","coordinates","isLoadingSelector","isLoading","getAll","axios","then","response","data","getCoordinateWithId","currentRouteSelector","navigationState","currentRoute","previousRouteSelector","previousRoute","Header","setCoordinates","navigate","history","useEffect","coordinatesService","setRoute","nextRoute","selectedLinkStyle","backgroundColor","isMapsRoute","includes","type","onClick","goBack","style","locationName","gps","defaultProps","ConnectedHeader","connect","dispatch","getCoordinatesSuccessAction","navigateAction","withRouter","App","exact","path","component","KeyCommandsPage","BonusMapPage","initialState","coordinatesReducer","action","navigationReducer","reducer","combineReducers","store","createStore","applyMiddleware","thunk","rootElement","getElementById","ReactDOM","module","exports"],"mappings":"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","file":"static/js/main.f5d52e3c.chunk.js","sourcesContent":["import * as THREE from 'three'\n\n// rotation rate, in radians per frame\nconst ROTATION_SPEED = 0.05\n\n// amount to increase/decrease speed per key press (q / a)\n// measured in meters/second\nconst ACCELERATION = 50\n\nexport default class ThreeModule {\n  constructor(props) {\n    // Set initial speed to zero\n    this.speed = -100\n\n    // Store a time stamp when a new rendering starts\n    this.frametime = 0\n\n    // Store a time stamp from the previous rendering\n    this.previousFrameTime = 0\n\n    // In three.js, everything to be drawn must be added to the Scene object\n    this.scene = new THREE.Scene()\n\n    // Define a general white light covering the entire scene\n    this.ambientLight = new THREE.AmbientLight(0xffffff)\n    this.scene.add(this.ambientLight)\n\n    // Define the camera - having a 45 degree field of view\n    // and an aspect ratio matching the aspect of the browser window\n    // and with a near limit of 10 and and far limit of 20000\n    this.camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      10,\n      20000\n    )\n\n    // Define the initial camera position (x, y, z)\n    this.camera.position.set(6000, 7000, 500)\n\n    // Fix up the camera coordinate conventions - so that the\n    // x and y coordinates run along the surface of our terrain\n    // and z describes the height\n    this.camera.rotateX(Math.PI * 0.2)\n    this.camera.up = new THREE.Vector3(0, 0, 1)\n\n    // Set up WebGL and attach a canvas element to the DOM\n    this.renderer = new THREE.WebGLRenderer()\n\n    // Set a background color: Simulate sky blue\n    this.renderer.setClearColor(new THREE.Color(0.5, 0.6, 0.8), 1)\n\n    // Set the canvas element to be full screen\n    this.renderer.setSize(window.innerWidth, window.innerHeight)\n\n    // Adjust pixel size for retina screens\n    this.renderer.setPixelRatio(window.devicePixelRatio)\n\n    // Add the canvas element Three.js renders to onto the DOM\n    props.ref.appendChild(this.renderer.domElement)\n\n    // Bind the resize handler function before using it\n    this.resizeHandler = this.resizeHandler.bind(this)\n\n    // Attach the resize handler function to the event\n    window.addEventListener('resize', this.resizeHandler, false)\n\n    // Bind the keyborard handler function before using it\n    this.keyboardHandler = this.keyboardHandler.bind(this)\n\n    // Attach the keyboard handler function to the event\n    window.addEventListener('keydown', this.keyboardHandler, false)\n\n    // Uncomment this code to render three lines on the screen, each describing the x, y and z axes\n    // const helper = new THREE.AxesHelper(1000)\n    // this.scene.add(helper)\n\n    // Add a ground plane - a flat mesh.\n    // The size and number of segments must match the source data height map.\n    // The demo input file has 50 meter resolution and has 256 by 256 data points.\n    // The ground plane should then be 50 * 256 units long and wide.\n    // It should have 256 segments in each direction - to match the input data.\n    const geometry = new THREE.PlaneBufferGeometry(\n      50 * 256,\n      50 * 256,\n      1024,\n      1024\n    )\n\n    // Define a grey colored material, having smooth shading\n    const material = new THREE.MeshPhongMaterial()\n\n    // ./data/91250-6973750.jpg ./data/91250-6973750.png\n\n    // Load the height map from the png file\n    const displacementMap = new THREE.TextureLoader().load(\n      props.textureMap || './data/91250-6973750.png'\n    )\n    material.displacementMap = displacementMap\n    material.displacementScale = props.displacementScale || 2000\n\n    // Load the photo texture from the jpg file\n\n    const texture = new THREE.TextureLoader().load(\n      props.imageMap || './data/91250-6973750.jpg'\n    )\n\n    material.map = texture\n\n    // Define this to be a Mesh\n    const ground = new THREE.Mesh(geometry, material)\n\n    // By default, the center point for a Mesh is placed at (0, 0, 0)\n    // Here we move the mesh so the lower left corner is at (0, 0, 0) instead\n    ground.position.set(\n      props.groundPosX || (50 * 256) / 2,\n      props.groundPosY || (50 * 256) / 2,\n      props.groundPosZ || 0\n    )\n\n    // Add the ground to the scene\n    this.scene.add(ground)\n\n    // Bind the animate function before using it\n    this.animate = this.animate.bind(this)\n    this.animate()\n  }\n\n  animate(currentFrametime) {\n    this.frametime = currentFrametime - this.previousFrameTime || 0\n    this.previousFrameTime = currentFrametime\n\n    requestAnimationFrame(this.animate)\n\n    const cameraDirection = new THREE.Vector3()\n    this.camera.getWorldDirection(cameraDirection)\n    this.camera.position.addScaledVector(\n      cameraDirection,\n      this.speed * this.frametime * 0.001\n    )\n\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  resizeHandler() {\n    // Adjust the camera aspect according to the window aspect\n    this.camera.aspect = window.innerWidth / window.innerHeight\n    this.camera.updateProjectionMatrix()\n\n    // Also adjust the canvas element size so it stays full screen\n    this.renderer.setSize(window.innerWidth, window.innerHeight)\n  }\n\n  keyboardHandler(keyboardEvent) {\n    switch (keyboardEvent.key) {\n      case 'ArrowDown':\n        this.camera.rotateX(ROTATION_SPEED)\n        break\n      case 'ArrowUp':\n        this.camera.rotateX(-ROTATION_SPEED)\n        break\n      case 'ArrowLeft':\n        this.camera.rotateZ(ROTATION_SPEED)\n        break\n      case 'ArrowRight':\n        this.camera.rotateZ(-ROTATION_SPEED)\n        break\n      case 'q':\n        this.speed += ACCELERATION\n        break\n      case 'a':\n        this.speed -= ACCELERATION\n        break\n      case 'z':\n        this.camera.rotateY(ROTATION_SPEED)\n        break\n      case 'x':\n        this.camera.rotateY(-ROTATION_SPEED)\n        break\n      default:\n        break\n    }\n  }\n}\n","import React, { Component } from 'react'\nimport ThreeModule from '../../utils/ThreeModuleBonus'\n\nclass MapPage extends Component {\n  constructor(props) {\n    super(props)\n    this.mapRef = React.createRef()\n  }\n\n  componentDidMount() {\n    // eslint-disable-next-line no-new\n    new ThreeModule({\n      ref: this.mapRef.current,\n      displacementScale: 200,\n      imageMap: './data/team1.png',\n      textureMap: './data/team1_bw.png'\n      // groundPosX: 0,\n      // groundPosY: 0,\n      // groundPosZ: 0\n    })\n  }\n\n  render() {\n    return <div ref={this.mapRef}> </div>\n  }\n}\n\nexport default MapPage\n","/* eslint-disable no-restricted-syntax */\n\nimport * as THREE from 'three'\n\nconst defaultCoordinate = [91250, 6973750]\nconst tilesets = [\n  {\n    id: 'sweden',\n    minX: 600000,\n    maxX: 800000,\n    minY: 6400000,\n    maxY: 6700000,\n    scale: 6000,\n    text: 'Russian submarine'\n  },\n  {\n    id: 'norway',\n    minX: 91250,\n    maxX: 100000,\n    minY: 6973750,\n    maxY: 7100000,\n    scale: 2000,\n    text: 'Molde'\n  },\n  {\n    id: 'denmark',\n    minX: 306148,\n    maxX: 330000,\n    minY: 6170538,\n    maxY: 6200000,\n    scale: 2000,\n    text: 'Roskilde'\n  }\n]\n// tile definition, depends on the topography and texture input data\nconst TILE_RESOLUTION = 50\n// rotation rate, in radians per frame\nconst ROTATION_SPEED = 0.05\n// amount to increase/decrease speed per key press (q / a)\n// measured in meters/second\nconst ACCELERATION = 50\nconst TILE_POINT_COUNT = 256\nconst TILE_SIZE = TILE_RESOLUTION * TILE_POINT_COUNT\n\nfunction rangeMapper([x, y]) {\n  let tileset\n  for (const ts of tilesets) {\n    if (ts.minX <= x && x <= ts.maxX && ts.minY <= y && y <= ts.maxY) {\n      tileset = ts\n    }\n  }\n  const tileX = x - ((x - tileset.minX) % (TILE_RESOLUTION * 255))\n  const tileY = y - ((y - tileset.minY) % (TILE_RESOLUTION * 255))\n  return { x: tileX, y: tileY, tileset }\n}\n\nfunction coordinateToScene([x, y], tile) {\n  const tileX = x - tile.x\n  const tileY = y - tile.y\n  return { x: tileX, y: tileY }\n}\n\nexport default class ThreeModule {\n  constructor(ref, originCoordinate) {\n    // Set initial speed to zero\n    this.speed = 0\n    // Store a time stamp when a new rendering starts\n    this.frametime = 0\n    // Store a time stamp from the previous rendering\n    this.previousFrameTime = 0\n    // In three.js, everything to be drawn must be added to the Scene object\n    this.scene = new THREE.Scene()\n    // Define a general white light covering the entire scene\n    this.ambientLight = new THREE.AmbientLight(0xffffff)\n    this.scene.add(this.ambientLight)\n    // Define the camera - having a 45 degree field of view\n    // and an aspect ratio matching the aspect of the browser window\n    // and with a near limit of 10 and and far limit of 40000\n    this.camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      10,\n      40000\n    )\n    // Define the initial camera position (x, y, z)\n    this.camera.position.set(5000, 5000, 1000)\n    // Fix up the camera coordinate conventions - so that the\n    // x and y coordinates run along the surface of our terrain\n    // and z describes the height\n    this.camera.rotateX(Math.PI / 2)\n    this.camera.up = new THREE.Vector3(0, 0, 1)\n    // Set up WebGL and attach a canvas element to the DOM\n    this.renderer = new THREE.WebGLRenderer()\n    // Set a background color: Simulate sky blue\n    const skyColor = new THREE.Color(0.5, 0.6, 0.8)\n    this.renderer.setClearColor(skyColor, 1)\n    // Set the canvas element to be full screen\n    this.renderer.setSize(window.innerWidth, window.innerHeight)\n    // Adjust pixel size for retina screens\n    this.renderer.setPixelRatio(window.devicePixelRatio)\n    this.createHorizon(skyColor)\n    // Add the canvas element Three.js renders to onto the DOM\n    ref.current.appendChild(this.renderer.domElement)\n    // Bind the resize handler function before using it\n    this.resizeHandler = this.resizeHandler.bind(this)\n    // Attach the resize handler function to the event\n    window.addEventListener('resize', this.resizeHandler, false)\n    // Bind the keyborard handler function before using it\n    this.keyboardHandler = this.keyboardHandler.bind(this)\n    // Attach the keyboard handler function to the event\n    window.addEventListener('keydown', this.keyboardHandler, false)\n    // Find the tile and tileset originCoordinate is on\n    const originTile = originCoordinate\n      ? rangeMapper(originCoordinate)\n      : rangeMapper(defaultCoordinate)\n    this.generateTiles(originTile)\n    if (originCoordinate) {\n      const targetCoordinate = coordinateToScene(originCoordinate, originTile)\n      this.createSign(targetCoordinate, originTile.tileset.text)\n      // Turn camera to look at sign\n      this.camera.lookAt(new THREE.Vector3(targetCoordinate.x, targetCoordinate.y, 0))\n    }\n    this.animate = this.animate.bind(this)\n    this.animate()\n  }\n\n  createHorizon(skyColor) {\n    const geometry = new THREE.PlaneBufferGeometry(\n      TILE_SIZE * 10,\n      TILE_SIZE * 10\n    )\n    const material = new THREE.MeshLambertMaterial(\n      { color: new THREE.Color(0.45, 0.5, 0.7) }\n    )\n    const horizon = new THREE.Mesh(geometry, material)\n    horizon.position.set(0, 0, -100)\n    this.scene.add(horizon)\n    const near = TILE_SIZE\n    const far = TILE_SIZE * 3\n    this.scene.fog = new THREE.Fog(skyColor, near, far)\n  }\n\n  generateTiles(tile) {\n    this.createTile(tile, { x: 0, y: 0 })\n    // Add neighbour tiles if they exist\n    for (const x of [-1, 0, 1]) {\n      for (const y of [-1, 0, 1]) {\n        if (x !== 0 || y !== 0) {\n          this.createTile({\n            ...tile,\n            x: tile.x + x * TILE_RESOLUTION * 255,\n            y: tile.y + y * TILE_RESOLUTION * 255\n          }, { x, y })\n        }\n      }\n    }\n  }\n\n  createTile(tile, origin) {\n    // Add a ground plane - a flat mesh.\n    // The size and number of segments must match the source data height map.\n    // The demo input file has 50 meter resolution and has 256 by 256 data points.\n    // The ground plane should then be 50 * 256 units long and wide.\n    // It should have 256 segments in each direction - to match the input data.\n    const geometry = new THREE.PlaneBufferGeometry(\n      TILE_SIZE,\n      TILE_SIZE,\n      TILE_POINT_COUNT,\n      TILE_POINT_COUNT\n    )\n    // Define a grey colored material, having smooth shading\n    const material = new THREE.MeshPhongMaterial()\n    const displacementMap = new THREE.TextureLoader().load(\n      `./data/${tile.x}-${tile.y}.png`\n    )\n    material.displacementMap = displacementMap\n    material.displacementScale = tile.tileset.scale\n    // Define this to be a Mesh\n    const ground = new THREE.Mesh(geometry, material)\n    // By default, the center point for a Mesh is placed at (0, 0, 0)\n    // Here we move the mesh so the lower left corner is at (0, 0, 0) instead\n    const centerX = origin.x * (TILE_SIZE) + (TILE_SIZE) / 2\n    const centerY = origin.y * (TILE_SIZE) + (TILE_SIZE) / 2\n    ground.position.set(centerX, centerY, 0)\n    // Initiate loading the photo texture from the jpg file\n    new THREE.TextureLoader().load(\n      `./data/${tile.x}-${tile.y}.jpg`,\n      (texture) => {\n        material.map = texture\n        material.fog = false\n        // Only add the ground to the scene if there is a texture\n        this.scene.add(ground)\n      },\n      undefined,\n      undefined\n    )\n  }\n\n  createSign(coordinate, text) {\n    // Create the sign\n    const signPosition = coordinate\n    // how tall the sign is\n    const bbElevation = 500\n    // how wide the pole is\n    const billboardPoleWidth = 14\n    this.text = text\n    const bbPixelHeight = 66\n    const bbLineWidth = 8\n    const billboardFont = 'bold 40px Helvetica'\n    const billboardPixelWidthPadding = 60\n    const billboardPixelMinimumWidth = 140\n    const textureWidth = 512\n    const textureHeight = 256\n    // scaling factor for billboard texture,\n    // maps pixels (texture) to metres (geometry)\n    const textureScale = 2\n    const billboardGeometryWidth = textureWidth * textureScale\n    const billboardGeometryHeight = textureHeight * textureScale\n\n    this.textureCanvas = document.createElement('canvas')\n    this.ctx = this.textureCanvas.getContext('2d')\n    this.textureCanvas.width = textureWidth\n    this.textureCanvas.height = textureHeight\n    this.ctx.clearRect(\n      0,\n      0,\n      this.textureCanvas.width,\n      this.textureCanvas.height\n    )\n    // NB color info is reused as alpha mask (black = transparent)\n    this.ctx.fillStyle = 'black'\n    this.ctx.fillRect(\n      0,\n      0,\n      this.textureCanvas.width,\n      this.textureCanvas.height\n    )\n    this.ctx.textAlign = 'center'\n    this.ctx.textBaseline = 'middle'\n    // NB color info is reused as alpha mask (white = opaque)\n    this.ctx.fillStyle = 'white'\n    this.ctx.font = billboardFont\n    this.ctx.fillText(\n      this.text,\n      this.textureCanvas.width / 2,\n      this.textureCanvas.height / 2\n    )\n    // measure effective text size in pixels\n    const textSize = this.ctx.measureText(this.text)\n    let billboardPixelWidth = textSize.width + billboardPixelWidthPadding\n    // pad short names so billboards become wide and not quadratic\n    if (billboardPixelWidth < billboardPixelMinimumWidth) {\n      billboardPixelWidth += 20\n    }\n    // draw border onto billboard\n    this.ctx.lineWidth = bbLineWidth\n    this.ctx.strokeStyle = 'white'\n    this.ctx.strokeRect(\n      this.textureCanvas.width / 2 - billboardPixelWidth / 2,\n      this.textureCanvas.height / 2 - bbPixelHeight / 2,\n      billboardPixelWidth,\n      bbPixelHeight\n    )\n    // use canvas contents as texture\n    const texture = new THREE.Texture(this.textureCanvas)\n    texture.needsUpdate = true\n\n    const billboardGeometry = new THREE.PlaneBufferGeometry(\n      billboardGeometryWidth,\n      billboardGeometryHeight\n    )\n    const billboardMaterial = new THREE.MeshBasicMaterial()\n    billboardMaterial.transparent = true\n    billboardMaterial.map = texture\n    billboardMaterial.alphaMap = texture\n\n    const billboard = new THREE.Mesh(billboardGeometry, billboardMaterial)\n    billboard.position.set(\n      signPosition.x,\n      signPosition.y,\n      bbElevation\n    )\n    billboard.up = new THREE.Vector3(0, 0, 1)\n\n    billboard.lookAt(\n      this.camera.position.x,\n      this.camera.position.y,\n      billboard.position.z\n    )\n    this.scene.add(billboard)\n    const poleGeometry = new THREE.BoxBufferGeometry(\n      billboardPoleWidth,\n      billboardPoleWidth,\n      bbElevation\n    )\n    const poleMaterial = new THREE.MeshPhongMaterial({ color: 0xffffff })\n    const pole = new THREE.Mesh(poleGeometry, poleMaterial)\n    pole.position.set(\n      signPosition.x,\n      signPosition.y,\n      bbElevation / 2 - (bbPixelHeight * textureScale) / 2 - (bbLineWidth * textureScale) / 2\n    )\n    this.scene.add(pole)\n  }\n\n  animate(currentFrametime) {\n    this.frametime = currentFrametime - this.previousFrameTime || 0\n    this.previousFrameTime = currentFrametime\n    requestAnimationFrame(this.animate)\n    const cameraDirection = new THREE.Vector3()\n    this.camera.getWorldDirection(cameraDirection)\n    this.camera.position.addScaledVector(\n      cameraDirection,\n      this.speed * this.frametime * 0.001\n    )\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  resizeHandler() {\n    // Adjust the camera aspect according to the window aspect\n    this.camera.aspect = window.innerWidth / window.innerHeight\n    this.camera.updateProjectionMatrix()\n    // Also adjust the canvas element size so it stays full screen\n    this.renderer.setSize(window.innerWidth, window.innerHeight)\n  }\n\n  keyboardHandler(keyboardEvent) {\n    switch (keyboardEvent.key) {\n      case 'ArrowDown':\n        this.camera.rotateX(ROTATION_SPEED)\n        break\n      case 'ArrowUp':\n        this.camera.rotateX(-ROTATION_SPEED)\n        break\n      case 'ArrowLeft':\n        this.camera.rotateZ(ROTATION_SPEED)\n        break\n      case 'ArrowRight':\n        this.camera.rotateZ(-ROTATION_SPEED)\n        break\n      case 'q':\n        this.speed += ACCELERATION\n        break\n      case 'a':\n        this.speed -= ACCELERATION\n        break\n      case 'z':\n        this.camera.rotateY(ROTATION_SPEED)\n        break\n      case 'x':\n        this.camera.rotateY(-ROTATION_SPEED)\n        break\n      default:\n        break\n    }\n  }\n}\n","import React, { Component } from 'react'\nimport proj4 from 'proj4'\nimport ThreeModule from '../../utils/ThreeModule'\n\nclass MapPage extends Component {\n  constructor(props) {\n    super(props)\n    this.mapRef = React.createRef()\n  }\n\n  componentDidMount() {\n    const queryparams = new URLSearchParams(window.location.search)\n    const gpsParam = queryparams.get('gps')\n    let coordinate\n    if (gpsParam) {\n      const [north, east] = gpsParam.split(',').map((str) => parseFloat(str))\n      const secondProjection =\n        '+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs '\n      coordinate = proj4('EPSG:4326', secondProjection)\n        .forward([east, north])\n        .map((float) => Math.round(float))\n    }\n    new ThreeModule(this.mapRef, coordinate) // eslint-disable-line no-new\n  }\n\n  render() {\n    return <div ref={this.mapRef}> </div>\n  }\n}\n\nexport default MapPage\n","import React from 'react'\n\nimport './InstructionsPage.scss'\n\nfunction InstructionsPage() {\n  return (\n    <div>\n      <div className=\"InstructionsPage\">\n        <div className=\"InstructionsPage_inner\">\n          <h1>Do it yourself</h1>\n          <h2>How to prepare data files</h2>\n          <ol>\n            <li>Download height data (from your local mapping agency, probably).</li>\n            <li>\n              Download satellite data (from your local mapping agency, or{' '}\n              <a href=\"https://apps.sentinel-hub.com/eo-browser/\">ESA</a>).\n            </li>\n          </ol>\n          <h2>Working with GDAL</h2>\n          <ul>\n            <li>Extract only the region you are interested in.</li>\n            <li>Make satellite and height data match (i.e. cover the same area).</li>\n            <li>\n              Use GDAL to convert the height data to a simple format (e.g. PNG) for presentation in\n              the browser.\n            </li>\n            <li>\n              Convert the satellite data to simple format (e.g. JPG) for presentation in the\n              browser.\n            </li>\n          </ul>\n          <h2>Introduction to GDAL</h2>\n          <ul>\n            <li>GDAL can convert and manipulate all kinds of geographical data.</li>\n            <li>\n              Download GDAL <a href=\"https://gdal.org/download.html#binaries\">here</a>.\n            </li>\n            <li>\n              To get an overview of all the programs contained inside GDAL check{' '}\n              <a href=\"https://gdal.org/programs/index.html\">here</a>.\n            </li>\n            <li>\n              It can read <strong>many</strong>{' '}\n              <a href=\"https://gdal.org/drivers/raster/index.html\">data formats</a>.\n            </li>\n          </ul>\n          <h2>Tips</h2>\n          <ul>\n            <li>\n              Use <strong>gdalinfo</strong> to extract information about files, and to see whether\n              GDAL can understand the file.\n            </li>\n            <li>\n              Use <strong>gdal_translate</strong> to extract a given region from a large file.\n            </li>\n          </ul>\n          <h2>Using GDAL - part 1</h2>\n          <ul>\n            <li>\n              Here is an example of a full command line converting a GeoTIFF height data file to a\n              png file:\n            </li>\n            <p>\n              <strong>\n                gdal_translate -of png -ot Byte -scale 0 2550 0 255 -srcwin start_x_coordinate\n                start_y_coordinate num_output_pixels_x num_output_pixels_y input.tif output.png\n              </strong>\n            </p>\n          </ul>\n          <h2>Explanation of the parameters</h2>\n          <ul>\n            <li>\n              <strong>-of png</strong> is there to tell gdal that the output file will be a png.\n            </li>\n            <li>\n              <strong>-ot Byte</strong> is there to restrict the height data to 1 byte per height\n              value. This is to ensure that we end up with a png that store height values in the\n              range of 0 to 255. Ie an 8-bit png file.\n            </li>\n            <li>\n              <strong>-scale 0 2550 0 255</strong> is there to map the input heights (in this case:\n              in the range from 0 to 2550 meters) to an output range (of 0 to 255). This in order to\n              match the range limitations of an 8-bit png file.\n            </li>\n            <li>\n              <strong>\n                -srcwin start_x_coordinate start_y_coordinate num_output_pixels_x\n                num_output_pixels_y tells\n              </strong>{' '}\n              where to start extracting height values (using the coordinate system that the source\n              file is using), and how many height values to extract in the x and y direction.\n            </li>\n            <li>\n              <strong>input.tif</strong> the input file name.\n            </li>\n            <li>\n              <strong>output.png</strong> the output file name.\n            </li>\n          </ul>\n          <h2>Using GDAL - part 2</h2>\n          <ul>\n            <li>\n              To use matching satellite imagery, first download a Sentinel zip{' '}\n              <a href=\"https://apps.sentinel-hub.com/eo-browser/\">file</a>. Unzip the file. There\n              should be a subdirectory called GRANULE there. Go there, and to its subdirectory\n              (having a long, cryptic name, like L1C_T33UUB_A013819_20191029T102039), and go to the\n              IMG_DATA subdirectory beneath it.\n            </li>\n            <li>\n              The file that ends with TCI.jp2 has the natural color information. This is a file in\n              JPEG2000 format, something which GDAL unfortunately is not able to read.\n            </li>\n            <li>\n              A solution could be to try to convert the jp2 file to a different file format (for\n              example GeoTIFF) and read out the projection information (the text which is shown when\n              you use `gdalinfo` on a file). The Preview application is macOS can read the jp2 file\n              and write a TIFF file. And then apply the projection information onto the TIFF file.\n            </li>\n            <li>\n              The idea is then to extract the extents information from the height data source file\n              and reapply the same extents information onto the satellite data file. This way they\n              will match. `gdal_translate` and the `-projwin ` option should be used to crop the\n              input image to spesific geographical coordinates.\n            </li>\n            <li>We did not succeed in extracting and matching raw Sentinel data.</li>\n            <li>\n              Final note: The satellite image size should preferably be somewhat higher than the\n              height map - for example 1024 by 1024 pixels. We did not succeed in extracting and\n              matching raw Sentinel data.\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default InstructionsPage\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport './HomePage.scss'\nimport team1Image from '../../assets/team1.png'\nimport team2Image from '../../assets/team2.png'\nimport hmGif from '../../assets/hm-wireframe.gif'\n\nfunction HomePage() {\n  return (\n    <div>\n      <div className=\"HomePage\">\n        <div className=\"HomePage_inner\">\n          <h1>Experience the magic of Nordic Earth</h1>\n          <p>\n            Nordic Earth gives you the power to generate 3D images from ortographic photos. By\n            combining topographic data with satelite images you can generate awesome 3D images. You\n            can pan around in the 3D universe and explore points of interest.\n          </p>\n          <h2>What is it</h2>\n          <ul>\n            <li>\n              As a journalist, you can use this expert tool to generate 3D image from a point of\n              interest.\n            </li>\n            <li>You can also make cool CGI panoramic content for your videos or articles.</li>\n          </ul>\n          <h3>Combining topographical data</h3>\n          <img alt=\"height map gif\" src={hmGif} />\n          <h2>Meet the geniuses behind this project</h2>\n          <img alt=\"geniuses 1\" src={team1Image} />\n          <br />\n          <br />\n          <br />\n          <Link to=\"/bonusmap\">\n            <img alt=\"geniuses 2\" src={team2Image} />\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default HomePage\n","import React from 'react'\n\nimport './KeyCommandsPage.scss'\n\nfunction KeyCommands() {\n  return (\n    <div>\n      <div className=\"KeyCommandsPage\">\n        <div className=\"KeyCommandsPage_inner\">\n          <h1>Key commands for the map</h1>\n          <ul>\n            <li>\n              <p>&uarr; tilts the camera down</p>\n            </li>\n            <li>\n              <p>&darr; tilts the camera up</p>\n            </li>\n            <li>\n              <p>&larr; rotates the camera counter-clockwise</p>\n            </li>\n            <li>\n              <p>&rarr; rotates the camera clockwise</p>\n            </li>\n            <li>q zooms in</li>\n            <li>a zooms out</li>\n            <li>z rotates the camera left</li>\n            <li>x rotates the camera right</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default KeyCommands\n","export const HOME = '/'\nexport const DIY = '/diy'\nexport const KEYS = '/keys'\nexport const MAPS = '/maps'\nexport const BONUS_MAP = '/bonusmap'\n","export const coordinatesSelector = (state) => state.coordinatesState.coordinates\nexport const isLoadingSelector = (state) => state.coordinatesState.isLoading\n","import axios from 'axios'\n\nconst baseUrl = '/api/coordinates'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then((response) => response.data)\n}\n\nconst getCoordinateWithId = (id) => {\n  const request = axios.get(`${baseUrl}/${id}`)\n  return request.then((response) => response.data)\n}\n\nexport default { getAll, getCoordinateWithId }\n","export const currentRouteSelector = (state) => state.navigationState.currentRoute\nexport const previousRouteSelector = (state) => state.navigationState.previousRoute\n","import React, { useEffect } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport Loader from 'react-loader-spinner'\n\nimport { HOME, DIY, KEYS, MAPS } from '../constants/routeNames'\nimport { coordinatesSelector, isLoadingSelector } from '../selectors/coordinatesSelector'\nimport { getCoordinatesSuccessAction } from '../actions/coordinatesActions'\nimport { navigateAction } from '../actions/navigationActions'\nimport coordinatesService from '../services/coordinatesService'\nimport { currentRouteSelector, previousRouteSelector } from '../selectors/navigationSelector'\nimport './Header.scss'\n\nfunction Header(props) {\n  const {\n    coordinates,\n    isLoading,\n    setCoordinates,\n    navigate,\n    currentRoute,\n    history,\n    previousRoute\n  } = props\n\n  const getCoordinates = () => {\n    coordinatesService.getAll().then((response) => {\n      setCoordinates(response)\n    })\n  }\n\n  useEffect(() => {\n    getCoordinates()\n  }, [])\n\n  const setRoute = (nextRoute) => {\n    navigate(nextRoute, currentRoute)\n  }\n\n  const exitMap = () => {\n    setRoute(previousRoute)\n    history.goBack()\n  }\n\n  const selectedLinkStyle = { backgroundColor: '#FFF', color: '#000' }\n  const isMapsRoute = ![HOME, DIY, KEYS].includes(currentRoute)\n\n  return (\n    <div className=\"header\">\n      <h1>NORDIC EARTH</h1>\n      {isMapsRoute && (\n        <div className=\"top_navigation_links\">\n          <button type=\"button\" onClick={exitMap}>\n            Exit map\n          </button>\n        </div>\n      )}\n      {!isMapsRoute && (\n        <div className=\"top_navigation_links\">\n          <Link\n            style={currentRoute === HOME ? selectedLinkStyle : {}}\n            to={HOME}\n            onClick={() => setRoute(HOME)}\n          >\n            Home\n          </Link>\n          <Link\n            style={currentRoute === DIY ? selectedLinkStyle : {}}\n            to={DIY}\n            onClick={() => setRoute(DIY)}\n          >\n            DIY\n          </Link>\n          <Link\n            style={currentRoute === KEYS ? selectedLinkStyle : {}}\n            to={KEYS}\n            onClick={() => setRoute(KEYS)}\n          >\n            Keys\n          </Link>\n          {isLoading && (\n            <Loader className=\"loader\" type=\"TailSpin\" color=\"#00BFFF\" height={40} width={40} />\n          )}\n          {!isLoading &&\n            coordinates.map((coordinate) => (\n              <Link\n                style={currentRoute === coordinate.locationName ? selectedLinkStyle : {}}\n                key={coordinate.id}\n                to={`${MAPS}?gps=${coordinate.gps}`}\n                onClick={() => setRoute(MAPS)}\n              >\n                {coordinate.locationName}\n              </Link>\n            ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\nHeader.propTypes = {\n  coordinates: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  setCoordinates: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  navigate: PropTypes.func.isRequired,\n  currentRoute: PropTypes.string.isRequired,\n  history: PropTypes.shape({ goBack: PropTypes.func.isRequired }).isRequired,\n  previousRoute: PropTypes.string\n}\n\nHeader.defaultProps = {\n  previousRoute: null\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  setCoordinates: (coordinates) => dispatch(getCoordinatesSuccessAction(coordinates)),\n  navigate: (nextRoute, previousRoute) => dispatch(navigateAction(nextRoute, previousRoute))\n})\n\nconst mapStateToProps = (state) => ({\n  coordinates: coordinatesSelector(state),\n  isLoading: isLoadingSelector(state),\n  currentRoute: currentRouteSelector(state),\n  previousRoute: previousRouteSelector(state)\n})\n\nconst ConnectedHeader = connect(mapStateToProps, mapDispatchToProps)(Header)\n\nexport default withRouter(ConnectedHeader)\n","import { GET_COORDINATES_SUCCESS } from '../constants/actionTypes'\n\nexport const getCoordinatesSuccessAction = (coordinates) => ({\n  type: GET_COORDINATES_SUCCESS,\n  coordinates\n})\n","export const GET_COORDINATES_SUCCESS = 'GET_COORDINATES_SUCCESS'\nexport const NAVIGATE = 'NAVIGATE'\n","import { NAVIGATE } from '../constants/actionTypes'\n\nexport const navigateAction = (nextRoute, previousRoute) => ({\n  type: NAVIGATE,\n  nextRoute,\n  previousRoute\n})\n","import React from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport './App.css'\nimport BonusMapPage from './pages/BonusMapPage/BonusMapPage'\nimport MapPage from './pages/MapPage/MapPage'\nimport InstructionsPage from './pages/InstructionsPage/InstructionsPage'\nimport HomePage from './pages/HomePage/HomePage'\nimport KeyCommandsPage from './pages/KeyCommandsPage/KeyCommandsPage'\nimport Header from './header/Header'\nimport { HOME, DIY, KEYS, MAPS, BONUS_MAP } from './constants/routeNames'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n        <Route exact path={HOME} component={HomePage} />\n        <Route path={DIY} component={InstructionsPage} />\n        <Route path={KEYS} component={KeyCommandsPage} />\n        <Route path={MAPS} component={MapPage} />\n        <Route path={BONUS_MAP} component={BonusMapPage} />\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","import { GET_COORDINATES_SUCCESS } from '../../constants/actionTypes'\n\nconst initialState = {\n  coordinates: [],\n  isLoading: true\n}\n\nconst coordinatesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_COORDINATES_SUCCESS:\n      return {\n        coordinates: action.coordinates,\n        isLoading: false\n      }\n    default:\n      return state\n  }\n}\n\nexport default coordinatesReducer\n","import { NAVIGATE } from '../../constants/actionTypes'\nimport { HOME } from '../../constants/routeNames'\n\nconst initialState = {\n  currentRoute: HOME,\n  previousRoute: null\n}\n\nconst navigationReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case NAVIGATE:\n      return {\n        currentRoute: action.nextRoute,\n        previousRoute: action.previousRoute\n      }\n    default:\n      return state\n  }\n}\n\nexport default navigationReducer\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport coordinatesReducer from './reducers/coordinatesReducer/coordinatesReducer'\nimport navigationReducer from './reducers/navigationReducer/navigationReducer'\n\nconst reducer = combineReducers({\n  coordinatesState: coordinatesReducer,\n  navigationState: navigationReducer\n})\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport './index.css'\nimport App from './App'\nimport store from './store'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n","module.exports = __webpack_public_path__ + \"static/media/team1.c532b920.png\";","module.exports = __webpack_public_path__ + \"static/media/team2.fb70ccd0.png\";","module.exports = __webpack_public_path__ + \"static/media/hm-wireframe.eda51d57.gif\";"],"sourceRoot":""}